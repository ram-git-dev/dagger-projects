name: Chaos Engineering Test

on:
  workflow_dispatch:
    inputs:
      namespace:
        description: 'Target namespace'
        required: true
        default: 'default'
        type: string
      
      deployment:
        description: 'Target deployment name'
        required: true
        default: 'sample-app'
        type: string
      
      chaos_type:
        description: 'Type of chaos to inject'
        required: true
        type: choice
        options:
          - pod-delete
          - pod-network-latency
          - pod-cpu-hog
          - pod-memory-hog
        default: 'pod-delete'
      
      chaos_duration:
        description: 'Chaos duration in seconds'
        required: true
        default: '60'
        type: string
      
      load_test_duration:
        description: 'Load test duration (e.g., 5m, 300s)'
        required: true
        default: '5m'
        type: string
      
      load_test_vus:
        description: 'Number of virtual users (concurrent requests)'
        required: true
        default: '10'
        type: string
      
      cleanup_after:
        description: 'Clean up operators after test?'
        required: true
        type: boolean
        default: true

jobs:
  chaos-test:
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      
      - name: Setup kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          
          # Test connection
          kubectl cluster-info
          kubectl get nodes
      
      - name: Install Dagger CLI
        run: |
          cd /usr/local
          curl -L https://dl.dagger.io/dagger/install.sh | sh
          dagger version
      
      - name: Run Dagger Chaos Pipeline
        working-directory: chaos-toolkit/dagger
        run: |
          # Install dependencies
          go mod download
          
          # Run the chaos test
          dagger call chaos-test \
            --namespace="${{ inputs.namespace }}" \
            --deployment="${{ inputs.deployment }}" \
            --chaos-type="${{ inputs.chaos_type }}" \
            --chaos-duration="${{ inputs.chaos_duration }}" \
            --load-test-duration="${{ inputs.load_test_duration }}" \
            --load-test-vus="${{ inputs.load_test_vus }}" \
            --cleanup=${{ inputs.cleanup_after }}
        env:
          KUBECONFIG: ${{ env.HOME }}/.kube/config
      
      - name: Upload Chaos Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: chaos-report-${{ github.run_number }}
          path: |
            chaos-toolkit/output/*.html
            chaos-toolkit/output/*.json
          retention-days: 30
      
      - name: Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('chaos-toolkit/output/summary.json', 'utf8');
            const data = JSON.parse(summary);
            
            const comment = `## üß™ Chaos Test Results
            
            **Target:** \`${{ inputs.deployment }}\` in \`${{ inputs.namespace }}\`
            **Chaos Type:** ${{ inputs.chaos_type }}
            **Duration:** ${{ inputs.chaos_duration }}s
            
            ### Results
            - **Status:** ${data.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}
            - **Error Rate:** ${data.errorRate}%
            - **P99 Latency:** ${data.p99Latency}ms
            - **Recovery Time:** ${data.recoveryTime}s
            
            üìä [Download Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });